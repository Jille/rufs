syntax = "proto3";

import "google/protobuf/descriptor.proto";

option go_package = "github.com/sgielen/rufs/proto";

service DiscoveryService {
	// Register signs your TLS client certificate.
	rpc Register(RegisterRequest) returns (RegisterResponse) {
	}

	rpc Connect(ConnectRequest) returns (stream ConnectResponse) {
	}

	rpc GetMyIP(GetMyIPRequest) returns (GetMyIPResponse) {
	}

	rpc ResolveConflict(ResolveConflictRequest) returns (ResolveConflictResponse) {
	}

	rpc Orchestrate(stream OrchestrateRequest) returns (stream OrchestrateResponse) {
	}

	rpc PushMetrics(PushMetricsRequest) returns (PushMetricsResponse) {
	}

	rpc PushLogs(PushLogsRequest) returns (PushLogsResponse) {
	}
}

message RegisterRequest {
	string username = 1;
	string token = 2;
	bytes public_key = 3;
	string client_version = 4;
}

message RegisterResponse {
	bytes certificate = 1;
}

message ConnectRequest {
	repeated string endpoints = 1;
	string client_version = 2;
	repeated string udpEndpoints = 3;
}

message ConnectResponse {
	message PeerList {
		repeated Peer peers = 1;
	}
	message ActiveDownload {
		int64 download_id = 1;
		string hash = 2;
		repeated string filenames = 3;
	}
	message ActiveDownloadList {
		repeated ActiveDownload active_downloads = 1;
	}

	oneof msg {
		PeerList peer_list = 1;
		ActiveDownloadList active_downloads = 2;
		ResolveConflictRequest resolve_conflict_request = 3;
	}
}

message GetMyIPRequest {
}

message GetMyIPResponse {
	string ip = 1;
}

message Peer {
	string name = 1;
	repeated string endpoints = 2;
	repeated string udpEndpoints = 3;
}

message ResolveConflictRequest {
	string filename = 1;
}

message ResolveConflictResponse {
}

message OrchestrateRequest {
	message StartOrchestrationRequest {
		int64 download_id = 1;
		string filename = 2;
		string hash = 3;
	}
	message UpdateByteRanges {
		repeated Range have = 1;
		repeated Range readnow = 2;
		repeated Range readahead = 3;
	}
	message ConnectedPeers {
		repeated string peers = 1;
	}
	message UploadFailed {
		repeated string target_peers = 1;
	}
	message SetHash {
		string hash = 1;
	}
	message HaveOpenHandles {
		bool haveOpenHandles = 1;
	}

	oneof msg {
		StartOrchestrationRequest start_orchestration = 1;
		UpdateByteRanges update_byte_ranges = 2;
		ConnectedPeers connected_peers = 3;
		UploadFailed upload_failed = 4;
		SetHash set_hash = 5;
		HaveOpenHandles have_open_handles = 6;
	}
}

message OrchestrateResponse {
	message Welcome {
		int64 download_id = 1;
	}
	message PeerList {
		repeated string peers = 1;
	}
	message UploadCommand {
		string peer = 1;
		Range range = 2;
	}

	oneof msg {
		Welcome welcome = 1;
		PeerList peer_list = 2;
		UploadCommand upload_command = 3;
	}
}

message Range {
	int64 start = 1;
	int64 end = 2;
}

message PushMetricsRequest {
	enum MetricType {
		UNKNOWN_TYPE = 0;
		INT64_GAUGE = 1;
		TIME_GAUGE = 2;
		COUNTER = 3;
		DISTRIBUTION = 4;
	}
	extend google.protobuf.EnumValueOptions {
		MetricType metric_type = 50001;
		repeated string metric_fields = 50002;
		string metric_description = 50003;
	}
	enum MetricId {
		UNKNOWN = 0 [(metric_type) = UNKNOWN_TYPE];
		CLIENT_START_TIME_SECONDS = 1 [(metric_type) = TIME_GAUGE, (metric_description) = "Timestamp at which each client started"];
		CLIENT_VERSION = 20 [(metric_type) = INT64_GAUGE, (metric_fields) = "version", (metric_description) = "Always 1, the field contains the client version"];
		TRANSFER_READS_ACTIVE = 2 [(metric_type) = INT64_GAUGE, (metric_description) = "Number of currently active reads"];
		TRANSFER_OPENS = 3 [(metric_type) = COUNTER, (metric_fields) = "code", (metric_description) = "Number of open calls from the VFS"];
		TRANSFER_READS = 5 [(metric_type) = COUNTER, (metric_fields) = "code", (metric_description) = "Number of read calls from the VFS"];
		TRANSFER_READ_SIZES = 6 [(metric_type) = DISTRIBUTION, (metric_description) = "Distribution of read sizes through the VFS"];
		TRANSFER_READ_LATENCY = 7 [(metric_type) = DISTRIBUTION, (metric_fields) = "code", (metric_fields) = "recv_kbytes", (metric_description) = "Latency of read RPCs from the VFS"];
		VFS_FIXED_CONTENT_OPENS = 8 [(metric_type) = COUNTER, (metric_fields) = "basename", (metric_description) = "Number of opens on fixed-content files in the VFS"];
		VFS_READDIRS = 9 [(metric_type) = COUNTER, (metric_description) = "Number of readdir calls on the VFS"];
		VFS_READDIR_LATENCY = 10 [(metric_type) = DISTRIBUTION, (metric_description) = "Latency of readdir calls on the VFS"];
		VFS_PEER_READDIRS = 11 [(metric_type) = COUNTER, (metric_fields) = "peer", (metric_fields) = "code", (metric_description) = "Number of readdir RPCs sent to peers from the VFS"];
		VFS_PEER_READDIR_LATENCY = 12 [(metric_type) = DISTRIBUTION, (metric_fields) = "peer", (metric_fields) = "code", (metric_description) = "Latency of readdir RPCs sent to peers from the VFS"];
		CONTENT_HASHES = 13 [(metric_type) = COUNTER, (metric_description) = "Number of files we've hashed for this circle"];
		CONTENT_RPCS_RECV = 14 [(metric_type) = COUNTER, (metric_fields) = "rpc", (metric_fields) = "caller", (metric_fields) = "code", (metric_description) = "Number of RPCs received by the content server"];
		CONTENT_RPCS_RECV_LATENCY = 15 [(metric_type) = DISTRIBUTION, (metric_fields) = "rpc", (metric_fields) = "caller", (metric_fields) = "code", (metric_description) = "Latency of incoming RPCs handled by the content server"];
		CONTENT_ORCHESTRATION_JOINED = 16 [(metric_type) = COUNTER, (metric_fields) = "why", (metric_description) = "Number of times we joined an orchestration"];
		CONTENT_ORCHESTRATION_JOIN_FAILED = 17 [(metric_type) = COUNTER, (metric_fields) = "why", (metric_description) = "Number of times we failed to join an orchestration"];
		TRANSFER_RECV_BYTES = 18 [(metric_type) = COUNTER, (metric_fields) = "peer", (metric_fields) = "transfer_type", (metric_description) = "Number of bytes received from other peers"];
		TRANSFER_SEND_BYTES = 19 [(metric_type) = COUNTER, (metric_fields) = "peer", (metric_fields) = "transfer_type", (metric_description) = "Number of bytes sent to other peers"];
	}
	message Metric {
		MetricId id = 1;
		repeated string fields = 2;
		double single_value = 3;
		repeated double new_distribution_values = 4;
	}
	repeated Metric metrics = 1;
}

message PushMetricsResponse {
}

message PushLogsRequest {
	repeated bytes messages = 1;
}

message PushLogsResponse {
	bool stop_sending_logs = 1;
}

service ContentService {
	rpc ReadDir(ReadDirRequest) returns (ReadDirResponse) {
	}

	rpc ReadFile(ReadFileRequest) returns (stream ReadFileResponse) {
	}

	rpc PassiveTransfer(stream PassiveTransferData) returns (stream PassiveTransferData) {
	}
}

message ReadDirRequest {
	string path = 1;
}

message ReadDirResponse {
	repeated File files = 1;
}

message File {
	string filename = 1;

	// Optional
	string hash = 2;

	bool is_directory = 3;
	int64 size = 4;
	int64 mtime = 5; // UNIX timestamp
}

message ReadFileRequest {
	string filename = 1;
	int64 offset = 2;
	int64 rdnow = 3;
	int64 rdahead = 4;
}

message ReadFileResponse {
	int64 offset = 1;
	bytes data = 2;

	int64 redirect_to_orchestrated_download = 6;
}

message PassiveTransferData {
	int64 download_id = 1;
	int64 offset = 2;
	bytes data = 3;
}
