syntax = "proto3";

option go_package = "github.com/sgielen/rufs/proto";

service DiscoveryService {
	// Register signs your TLS client certificate.
	rpc Register(RegisterRequest) returns (RegisterResponse) {
	}

	rpc Connect(ConnectRequest) returns (stream ConnectResponse) {
	}

	rpc GetMyIP(GetMyIPRequest) returns (GetMyIPResponse) {
	}
}

message RegisterRequest {
	string username = 1;
	string token = 2;
	bytes public_key = 3;
}

message RegisterResponse {
	bytes certificate = 1;
}

message ConnectRequest {
	repeated string endpoints = 1;
}

message ConnectResponse {
	repeated Peer peers = 1;
}

message GetMyIPRequest {
}

message GetMyIPResponse {
	string ip = 1;
}

message Peer {
	string name = 1;
	repeated string endpoints = 2;
}

service ContentService {
	rpc ReadDir(ReadDirRequest) returns (ReadDirResponse) {
	}

	rpc ReadFile(ReadFileRequest) returns (stream ReadFileResponse) {
	}

	rpc PassiveRead(PassiveReadRequest) returns (stream PassiveReadResponse) {
	}
}

message ReadDirRequest {
	string path = 1;
}

message ReadDirResponse {
	repeated File files = 1;
}

message File {
	string filename = 1;

	// Optional
	string hash = 2;

	bool is_directory = 3;
}

message ReadFileRequest {
	string filename = 1;
	uint64 offset = 2;
	uint64 rdnow = 3;
	uint64 rdahead = 4;
}

message ReadFileResponse {
	uint64 offset = 1;
	bytes data = 2;
}

message PassiveReadRequest {
	int64 download_id = 1;
}

message PassiveReadResponse {
	uint64 offset = 1;
	bytes data = 2;
}

service DownloadOrchestrator {
	rpc Orchestrate(stream OrchestrateRequest) returns (stream OrchestrateResponse) {
	}
}

message OrchestrateRequest {
	message OrchestrateRequest {
		int64 download_id = 1;
		repeated Range have = 2;
		repeated Range want_now = 3;
		repeated Range readahead = 4;
	}
	message UploadFailed {
		repeated string target_peers = 1;
	}

	oneof msg {
		OrchestrateRequest orchestrate = 1;
		UploadFailed upload_failed = 2;
	}
}

message OrchestrateResponse {
	message ContentProvider {
		Peer peer = 1;
		repeated Range has = 2;
	}
	message ContentProvidersList {
		repeated ContentProvider providers = 1;
	}
	message UploadCommand {
		string peer = 1;
		Range range = 2;
	}

	oneof msg {
		ContentProvidersList content_providers = 1;
		UploadCommand upload_command = 2;
	}
}

message Range {
	uint64 start = 1;
	uint64 end = 2;
}
