// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryServiceClient is the client API for DiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryServiceClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (DiscoveryService_ConnectClient, error)
}

type discoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryServiceClient(cc grpc.ClientConnInterface) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

var discoveryServiceConnectStreamDesc = &grpc.StreamDesc{
	StreamName:    "Connect",
	ServerStreams: true,
}

func (c *discoveryServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (DiscoveryService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, discoveryServiceConnectStreamDesc, "/DiscoveryService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryServiceConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiscoveryService_ConnectClient interface {
	Recv() (*ConnectResponse, error)
	grpc.ClientStream
}

type discoveryServiceConnectClient struct {
	grpc.ClientStream
}

func (x *discoveryServiceConnectClient) Recv() (*ConnectResponse, error) {
	m := new(ConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiscoveryServiceService is the service API for DiscoveryService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterDiscoveryServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type DiscoveryServiceService struct {
	Connect func(*ConnectRequest, DiscoveryService_ConnectServer) error
}

func (s *DiscoveryServiceService) connect(_ interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.Connect(m, &discoveryServiceConnectServer{stream})
}

type DiscoveryService_ConnectServer interface {
	Send(*ConnectResponse) error
	grpc.ServerStream
}

type discoveryServiceConnectServer struct {
	grpc.ServerStream
}

func (x *discoveryServiceConnectServer) Send(m *ConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterDiscoveryServiceService registers a service implementation with a gRPC server.
func RegisterDiscoveryServiceService(s grpc.ServiceRegistrar, srv *DiscoveryServiceService) {
	srvCopy := *srv
	if srvCopy.Connect == nil {
		srvCopy.Connect = func(*ConnectRequest, DiscoveryService_ConnectServer) error {
			return status.Errorf(codes.Unimplemented, "method Connect not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "DiscoveryService",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Connect",
				Handler:       srvCopy.connect,
				ServerStreams: true,
			},
		},
		Metadata: "rufs.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewDiscoveryServiceService creates a new DiscoveryServiceService containing the
// implemented methods of the DiscoveryService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewDiscoveryServiceService(s interface{}) *DiscoveryServiceService {
	ns := &DiscoveryServiceService{}
	if h, ok := s.(interface {
		Connect(*ConnectRequest, DiscoveryService_ConnectServer) error
	}); ok {
		ns.Connect = h.Connect
	}
	return ns
}

// UnstableDiscoveryServiceService is the service API for DiscoveryService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableDiscoveryServiceService interface {
	Connect(*ConnectRequest, DiscoveryService_ConnectServer) error
}
