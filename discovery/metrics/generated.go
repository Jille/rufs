package metrics

// This file is generated by metricgen/gen.go.
import (
	"github.com/prometheus/client_golang/prometheus"
	pb "github.com/sgielen/rufs/proto"
)

var (
	metrics = map[pb.PushMetricsRequest_MetricId]processMetric{
		pb.PushMetricsRequest_CLIENT_START_TIME_SECONDS: newGauge(prometheus.GaugeOpts{
			Namespace: "rufs",
			Name: "client_start_time_seconds",
			Help: "",
		}, nil),
		pb.PushMetricsRequest_TRANSFER_READS_ACTIVE: newGauge(prometheus.GaugeOpts{
			Namespace: "rufs",
			Name: "transfer_reads_active",
			Help: "",
		}, nil),
		pb.PushMetricsRequest_TRANSFER_OPENS: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "transfer_opens",
			Help: "",
		}, []string{"code"}),
		pb.PushMetricsRequest_TRANSFER_READS: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "transfer_reads",
			Help: "",
		}, []string{"code"}),
		pb.PushMetricsRequest_TRANSFER_READ_SIZES: newHistogram(prometheus.HistogramOpts{
			Namespace: "rufs",
			Name: "transfer_read_sizes",
			Help: "",
			Buckets: bucketsForTransferReadSizes,
		}, nil),
		pb.PushMetricsRequest_TRANSFER_READ_LATENCY: newHistogram(prometheus.HistogramOpts{
			Namespace: "rufs",
			Name: "transfer_read_latency",
			Help: "",
			Buckets: bucketsForTransferReadLatency,
		}, []string{"code", "recv_kbytes"}),
		pb.PushMetricsRequest_VFS_FIXED_CONTENT_OPENS: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "vfs_fixed_content_opens",
			Help: "",
		}, []string{"basename"}),
		pb.PushMetricsRequest_VFS_READDIRS: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "vfs_readdirs",
			Help: "",
		}, nil),
		pb.PushMetricsRequest_VFS_READDIR_LATENCY: newHistogram(prometheus.HistogramOpts{
			Namespace: "rufs",
			Name: "vfs_readdir_latency",
			Help: "",
			Buckets: bucketsForVfsReaddirLatency,
		}, nil),
		pb.PushMetricsRequest_VFS_PEER_READDIRS: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "vfs_peer_readdirs",
			Help: "",
		}, []string{"peer", "code"}),
		pb.PushMetricsRequest_VFS_PEER_READDIR_LATENCY: newHistogram(prometheus.HistogramOpts{
			Namespace: "rufs",
			Name: "vfs_peer_readdir_latency",
			Help: "",
			Buckets: bucketsForVfsPeerReaddirLatency,
		}, []string{"peer", "code"}),
		pb.PushMetricsRequest_CONTENT_HASHES: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "content_hashes",
			Help: "",
		}, nil),
		pb.PushMetricsRequest_CONTENT_RPCS_RECV: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "content_rpcs_recv",
			Help: "",
		}, []string{"rpc", "peer", "code"}),
		pb.PushMetricsRequest_CONTENT_RPCS_RECV_LATENCY: newHistogram(prometheus.HistogramOpts{
			Namespace: "rufs",
			Name: "content_rpcs_recv_latency",
			Help: "",
			Buckets: bucketsForContentRpcsRecvLatency,
		}, []string{"rpc", "peer", "code"}),
		pb.PushMetricsRequest_CONTENT_ORCHESTRATION_JOINED: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "content_orchestration_joined",
			Help: "",
		}, []string{"why"}),
		pb.PushMetricsRequest_CONTENT_ORCHESTRATION_JOIN_FAILED: newCounter(prometheus.CounterOpts{
			Namespace: "rufs",
			Name: "content_orchestration_join_failed",
			Help: "",
		}, []string{"why"}),
	}
)
